{"version":3,"sources":["theme/theme.js","components/NeonGrid.js","components/RetroSun.js","App.js","serviceWorker.js","index.js"],"names":["defaultTheme","colors","bg","grid","sunTop","sunBottom","sunShining","textContrast","sizes","gridLine","StyledGrid","styled","div","StyledHorizLine","lineRow","moveLine","keyframes","HorlineNeon","theme","VertlineNeon","VertLine","lineCol","NeonGrid","Array","fill","map","item","i","key","count","renderVertLines","StyledSun","SunLines","lineOffset","SunLine","h","mgt","RetroSun","GlobalStyle","createGlobalStyle","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMAeeA,EAfM,CACnBC,OAAQ,CACNC,GAAI,OACJC,KAAM,UACNC,OAAQ,UAERC,UAAW,UACXC,WAAY,UACZC,aAAc,WAEhBC,MAAO,CACLC,SAAU,Q,k2CCRd,IAAMC,EAAaC,IAAOC,IAAV,KAaVC,EAAkBF,IAAOC,IAAV,KAEP,qBAAGE,WAA2B,qBAAGA,QAAwB,KAIjEC,EAAWC,YAAH,KASRC,EAAcN,IAAOC,IAAV,KAKK,qBAAGM,MAAkBjB,OAAOE,QACtC,qBAAGe,MAAkBV,MAAMC,YAEf,qBAAGS,MAAkBjB,OAAOE,OACtBY,GAGxBI,EAAeR,IAAOC,IAAV,KAKI,qBAAGM,MAAkBjB,OAAOE,QAEvC,qBAAGe,MAAkBV,MAAMC,YACd,qBAAGS,MAAkBjB,OAAOE,QAG9CiB,EAAWT,IAAOC,IAAV,KAGG,qBAAGS,WACC,qBAAGH,MAAkBV,MAAMC,YAC1C,qBAAGS,MAAkBjB,OAAOE,QAiCnBmB,EAVE,WACf,OACE,kBAACZ,EAAD,KArBKa,MAsBe,IArBnBC,KAAK,IACLC,KAAI,SAACC,EAAMC,GAAP,OACH,kBAACd,EAAD,CAAiBe,IAAKD,EAAGb,QAASa,EAAI,GACpC,kBAACV,EAAD,UAKgB,SAACY,GACvB,OAAON,MAAMM,GACVL,KAAK,IACLC,KAAI,SAACC,EAAMC,GAAP,OACH,kBAACP,EAAD,CAAUQ,IAAG,mBAAcD,GAAKN,QAASM,GACvC,kBAACR,EAAD,UASDW,CAAgB,IACjB,kBAACV,EAAD,Q,ywBCpFN,IAAMW,EAAYpB,IAAOC,IAAV,KAUT,qBAAGM,MAAkBjB,OAAOG,UAC5B,qBAAGc,MAAkBjB,OAAOI,aAER,qBAAGa,MAAkBjB,OAAOK,cAShD0B,EAAWrB,IAAOC,IAAV,KAIY,qBAAGqB,cAGvBC,EAAUvB,IAAOC,IAAV,KAED,qBAAGuB,KACC,qBAAGC,OAgBJC,EAZE,WACf,OACE,kBAACN,EAAD,KACE,kBAACC,EAAD,CAAUC,WAAY,IACpB,kBAACC,EAAD,CAASC,EAAG,EAAGC,IAAK,IACpB,kBAACF,EAAD,CAASC,EAAG,IAAKC,IAAK,MACtB,kBAACF,EAAD,CAASC,EAAG,EAAGC,IAAK,O,udCxC5B,IAAME,EAAcC,YAAH,KAgBO,qBAAGrB,MAAkBjB,OAAOC,MACvC,qBAAGgB,MAAkBjB,OAAOM,gBAoB1BiC,MAZf,WACE,OACE,oCACE,kBAACF,EAAD,MACA,yBAAKG,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCxBYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAe/B,MAAOgC,GACpB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.67b4265b.chunk.js","sourcesContent":["const defaultTheme = {\r\n  colors: {\r\n    bg: '#000',\r\n    grid: '#9400d3',\r\n    sunTop: '#FFA500',\r\n    // sunBottom: '#FF6347',\r\n    sunBottom: '#FF0000',\r\n    sunShining: '#FF6347',\r\n    textContrast: '#FFFFFF',\r\n  },\r\n  sizes: {\r\n    gridLine: '1px',\r\n  },\r\n};\r\n\r\nexport default defaultTheme;\r\n","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\nconst StyledGrid = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: grid;\r\n  grid-template-columns: repeat(50, minmax(0.5rem, 1fr));\r\n  grid-auto-rows: 2rem;\r\n  justify-content: center;\r\n  align-content: end;\r\n  transform: perspective(10rem) translate3d(0, 0, 0) scale3d(2.5, 1, 1)\r\n    rotate3d(1, 0, 0, 55deg);\r\n  z-index: 1;\r\n`;\r\n\r\nconst StyledHorizLine = styled.div`\r\n  grid-column: 1 / -1;\r\n  grid-row: ${({ lineRow }) => lineRow} / ${({ lineRow }) => lineRow + 1};\r\n  position: relative;\r\n`;\r\n\r\nconst moveLine = keyframes`\r\n  0% {\r\n    top: 0%;\r\n  }\r\n  100% {\r\n    top: 100%;\r\n  }\r\n`;\r\n\r\nconst HorlineNeon = styled.div`\r\n  position: absolute;\r\n  top: 0%;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: ${({ theme }) => theme.colors.grid};\r\n  height: ${({ theme }) => theme.sizes.gridLine};\r\n  transition: all 0.3s;\r\n  box-shadow: 0 0 2px ${({ theme }) => theme.colors.grid};\r\n  animation: 0.3s linear 0s ${moveLine} infinite;\r\n`;\r\n\r\nconst VertlineNeon = styled.div`\r\n  position: absolute;\r\n  top: 0%;\r\n  left: 0;\r\n  height: 100%;\r\n  background-color: ${({ theme }) => theme.colors.grid};\r\n  clip-path: polygon(30% 0%, 70% 0%, 100% 100%, 0% 100%);\r\n  width: ${({ theme }) => theme.sizes.gridLine};\r\n  box-shadow: 0 0 2px ${({ theme }) => theme.colors.grid};\r\n`;\r\n\r\nconst VertLine = styled.div`\r\n  position: relative;\r\n  grid-row: 2 / 22;\r\n  grid-column: ${({ lineCol }) => lineCol} / span 1;\r\n  /* border-right: ${({ theme }) => theme.sizes.gridLine} solid\r\n    ${({ theme }) => theme.colors.grid}; */\r\n`;\r\n\r\nconst renderHorizLines = (count) => {\r\n  return Array(count)\r\n    .fill('')\r\n    .map((item, i) => (\r\n      <StyledHorizLine key={i} lineRow={i + 2}>\r\n        <HorlineNeon />\r\n      </StyledHorizLine>\r\n    ));\r\n};\r\n\r\nconst renderVertLines = (count) => {\r\n  return Array(count)\r\n    .fill('')\r\n    .map((item, i) => (\r\n      <VertLine key={`vertical ${i}`} lineCol={i}>\r\n        <VertlineNeon />\r\n      </VertLine>\r\n    ));\r\n};\r\n\r\nconst NeonGrid = () => {\r\n  return (\r\n    <StyledGrid>\r\n      {renderHorizLines(20)}\r\n      {renderVertLines(50)}\r\n      <VertLine />\r\n    </StyledGrid>\r\n  );\r\n};\r\n\r\nexport default NeonGrid;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledSun = styled.div`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 2%;\r\n  transform: translateX(-50%);\r\n  width: 15vw;\r\n  height: 15vw;\r\n  border-radius: 200rem;\r\n  background: linear-gradient(\r\n    180deg,\r\n    ${({ theme }) => theme.colors.sunTop},\r\n    ${({ theme }) => theme.colors.sunBottom}\r\n  );\r\n  box-shadow: 0 0 50rem ${({ theme }) => theme.colors.sunShining};\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: stretch;\r\n  z-index: 2;\r\n`;\r\n\r\nconst SunLines = styled.div`\r\n  width: 100%;\r\n  height: 10vh;\r\n  background-color: transparent;\r\n  transform: translateY(${({ lineOffset }) => lineOffset}vw);\r\n`;\r\n\r\nconst SunLine = styled.div`\r\n  width: 100%;\r\n  height: ${({ h }) => h}vh;\r\n  margin-top: ${({ mgt }) => mgt}vh;\r\n  background-color: #000;\r\n`;\r\n\r\nconst RetroSun = () => {\r\n  return (\r\n    <StyledSun>\r\n      <SunLines lineOffset={10}>\r\n        <SunLine h={1} mgt={0} />\r\n        <SunLine h={1.5} mgt={1.5} />\r\n        <SunLine h={2} mgt={2} />\r\n      </SunLines>\r\n    </StyledSun>\r\n  );\r\n};\r\n\r\nexport default RetroSun;\r\n","import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport NeonGrid from './components/NeonGrid';\nimport RetroSun from './components/RetroSun';\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    font-size: 1em;\n    box-sizing: border-box;\n  }\n  *,*::before,*::after {\n    box-sizing: inherit;\n    margin: 0;\n    padding: 0;\n  }\n  html, body, #root, .app {\n    min-height: 100%;\n  }\n  body {\n    font-family: 'Roboto', Arial, sans-serif;\n    font-size: 1rem;\n    background-color: ${({ theme }) => theme.colors.bg};\n    color: ${({ theme }) => theme.colors.textContrast};\n  }\n  .app {\n    overflow: hidden;\n    height: 100vh;\n  }\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <div className='app'>\n        <RetroSun />\n        <NeonGrid />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport Theme from './theme/theme';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={Theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}